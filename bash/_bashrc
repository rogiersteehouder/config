#####
# Setup
#####

# interactive shell
case "$-" in
	*i*) interactive=yes;;
	*) interactive=no;;
esac
[ "${interactive}" = "no" ] && return

hostname=$(hostname)
hostname=${hostname%.*}

# Terminal colors
normal="\033[m"
reset="\033[0;37;00m"
black="\033[0;30m"
red="\033[0;31m"
green="\033[0;$32m"
yellow="\033[0;33m"
blue="\033[0;34m"
violet="\033[0;35m"
cyan="\033[0;36m"
white="\033[0;37m"
bright_black="\033[1;30m"
bright_red="\033[1;31m"
bright_green="\033[1;32m"
bright_yellow="\033[1;33m"
bright_blue="\033[1;34m"
bright_violet="\033[1;35m"
bright_cyan="\033[1;36m"
bright_white="\033[1;37m"

case "$TERM" in
	linux|xterm|xterm-color|xterm-256color) color_prompt=yes;;
	*) color_prompt=no;;
esac


#####
# Environment
#####

export PATH=/usr/local/bin:/usr/bin:/bin:~/bin:.

if [ "${color_prompt}" = "yes" ]; then
	PS1="\[${bright_yellow}\][\$?|\j]\[${normal}\] \u: \w > "
else
	PS1="[\$?|\j] \u: \w > "
fi

export SUDO_PROMPT='[sudo] password for %u on %h: '

export PAGER=less
export EDITOR=vim
export VISUAL=${EDITOR}

export IPYTHONDIR=${XDG_DATA_HOME:-$HOME/.local/share}/ipython
export JUPYTER_CONFIG_DIR=${XDG_CONFIG_HOME:-$HOME/.config}/jupyter

export LESSHISTFILE=-

shopt -s nocaseglob checkwinsize extglob progcomp

[ -f "${HOME}/.config/python/startup.py" ] && export PYTHONSTARTUP="${HOME}/.config/python/startup.py"

# Host specific variations

if [ "${OSTYPE}" = "Cygwin" ]; then
	# cygwin
	export VISUAL=$(cygpath -au "$CYGWINDIR/../Apps/PortableApps/Notepad++Portable/Notepad++Portable.exe")
else
	# full systems
	case ${hostname} in
	[Cc]runchbang)
		export EDITOR=vim.tiny
		export VISUAL=geany
		;;
	[Aa]glarondÂ§)
		export PATH=/usr/local/bin:/usr/bin:/bin:~/bin:.
		export VISUAL=atom
		;;
	esac
fi

[ -z "${DISPLAY}" ] && unset VISUAL

#####
# Functions
#####

if [ "${interactive}" = "yes" ]; then

	if [ "${color_prompt}" = "yes" ]; then
		function ls() { command ls -h -F --color=auto "$@"; }
	else
		function ls() { command ls -h -F "$@"; }
	fi

	if [ -z "${VISUAL}" ]; then
		function edit() { ${EDITOR} "$@"; }
	else
		function edit() { ${VISUAL} "$@"; }
	fi

	function sshrdp() { ssh -L 3389:localhost:3389 "$@"; }

	function command_not_found_handle() {
		# administrator programs
		local prefix
		if [ -x "/usr/sbin/$1" -o -x "/sbin/$1" ]; then
			if [ -x "/sbin/$1" ]; then prefix=''; else prefix='/usr'; fi
			echo "Absolute path to '$1' is '$prefix/sbin/$1'"
			return 127
		fi

		echo "$1: command not found"
		return 127
	}

	case "${OSTYPE}" in

	cygwin)
		unset -f command_not_found_handle
		function path_toggle() {
			# toggle path to include windows path or not
			if [ -z "${cygpath}" ]; then
				cygpath=${PATH}
				PATH=${PATH}:$(cygpath -pu "${WINPATH}")
			else
				PATH=${cygpath}
				unset cygpath
			fi
		}
		;;

	darwin*)
		function ls() { command ls -GFh "$@"; }
		function ql() { qlmanage -p "$@"; }
		function finder_dir() { osascript -e 'tell application "Finder" to if window 1 exists then if target of window 1 as string is not ":" then get POSIX path of (target of window 1 as alias)'; }
		function cdf() { export finder_dir=$(finder_dir); if [ "${finder_dir}" != "" ]; then cd "${finder_dir}"; fi }
		function pushdf() { export finder_dir=$(finder_dir); if [ "${finder_dir}" != "" ]; then pushd "${finder_dir}"; fi }
		;;

	esac # OSTYPE

fi # interactive shell


#####
# Completions
#####

if [ "${interactive}" = "yes" ]; then # interactive shell
if [ "${OSTYPE}" != "cygwin" ]; then # not cygwin

# directories
complete -o nospace -d cd pushd

# files
#complete -f

# other
complete -a unalias
complete -c which
complete -v readonly unset
complete -A job -P '"%' -S '"' fg jobs disown
complete -A stopped -P '"%' -S '"' bg
complete -A helptopic help

# special
complete -o filenames -F _command command do else then time xargs
complete -o filenames -F _root_command sudo
complete -F _pid kill
complete -F _pname killall pkill pgrep

# support functions
function _command() {
	COMPREPLY=()

	local spec
	local -a words=(${COMP_WORDS[@]})
	local -i offset=0 i

	for (( i=1; i < COMP_CWORD; i++ )); do
		if [[ "${words[$i]}" != "-*" ]]; then
			offset=$i
			break
		fi
	done

	spec='-c'
	if [ ${offset} -gt 0 ]; then
		for (( i=0; i < offset; i++ )); do
			unset words[$i]
		done
		words=(${words[@]})
		if complete -p "${words[0]}" &> /dev/null; then
			spec=$(complete -p "${words[0]}")
			spec=${spec#complete}
			spec=${spec%%${words[0]}}
		else
			spec='-o default'
		fi
	fi

	offset=$(( COMP_CWORD - offset ))
	if [ -n "${spec}" ]; then
		COMPREPLY=($(eval compgen "$spec" -- ${words[$offset]}))
	fi
}
function _root_command() {
	local PATH=${PATH}:/sbin:/usr/sbin
	_command $1 $2 $3
}

function _pid() {
	COMPREPLY=( $(compgen -W '$(command ps axo pid=)' -- "${COMP_WORDS[$COMP_CWORD]}") )
}
function _pname() {
	COMPREPLY=( $(compgen -W '$(command ps axo command= | sed -e "s/ .*//" -e "s:.*/::" -e "s/:$//" -e "s/^[[(-]//" -e "s/[])]$//" | sort -u)' -- "${COMP_WORDS[$COMP_CWORD]}") )
}

fi # not cygwin
fi # interactive shell


#####
# History
#####

shopt -s histreedit histappend

export HISTFILE=${HOME}/.local/share/bash/bash_history
export HISTCONTROL=erasedups
export HISTSIZE=2048
export HISTFILESIZE=8192
export HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help"


#####
# Cleanup
#####

unset -v interactive
unset -v hostname
unset -v normal reset black red green yellow blue violet cyan white bright_black bright_red bright_green bright_yellow bright_blue bright_violet bright_cyan bright_white
unset -v color_prompt
